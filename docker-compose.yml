version: '3.8'

services:
  # Eureka Server
  eureka-server:
    build: ./eureka-server
    image: exchange-platform/eureka-server
    container_name: eureka-server
    ports:
      - "8761:8761"
    networks:
      - microservices-net

  # API Gateway
  exchange-gateway:
    build: ./exchange-gateway
    image: exchange-platform/api-gateway
    container_name: exchange-gateway
    depends_on:
      - eureka-server
    environment:
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka/
    ports:
      - "8080:8080"
    networks:
      - microservices-net

  # Currency Service
  currency-service:
    build: ./currency-service
    image: exchange-platform/currency-service
    container_name: currency-service
    depends_on:
      - eureka-server
      - postgres
      - mongo
      - redis
    environment:
      - SPRING_R2DBC_URL=r2dbc:postgresql://postgres:5432/currency_db
      - SPRING_R2DBC_USERNAME=admin
      - SPRING_R2DBC_PASSWORD=admin
      - SPRING_DATA_MONGODB_URI=mongodb://mongo:27017/currency_events
      - SPRING_DATA_REDIS_HOST=redis
      - SPRING_DATA_REDIS_PORT=6379      
      - EUREKA_SERVER_URL=http://eureka-server:8761/eureka/
    ports:
      - "8081:8081"
    networks:
      - microservices-net
  
  # Migration Service
  migration-service:
    build: ./migration-service
    image: exchange-platform/migration-service
    container_name: migration-service
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/currency_db
      - SPRING_DATASOURCE_USERNAME=admin
      - SPRING_DATASOURCE_PASSWORD=admin
      - SPRING_DATASOURCE_DRIVER-CLASS-NAME=org.postgresql.Driver
      - SPRING_LIQUIBASE_ENABLED=true
      - SPRING_LIQUIBASE_CHANGE-LOG=classpath:db/changelog/db.changelog-master.yaml
    networks:
      - microservices-net

  # PostgreSQL
  postgres:
    image: postgres:15
    container_name: postgres-currency-db
    environment:
      POSTGRES_DB: currency_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5432:5432"
    networks:
      - microservices-net
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d currency_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB
  mongo:
    image: mongo:6
    container_name: mongo-currency-db
    ports:
      - "27017:27017"
    networks:
      - microservices-net
    volumes:
      - mongo-data:/data/db

  # Redis
  redis:
    image: redis:7
    container_name: redis-currency-cache
    ports:
      - "6379:6379"
    networks:
      - microservices-net

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_KRAFT_CLUSTER_ID: kraft-cluster-1
      KAFKA_ENABLE_KRAFT: yes
      KAFKA_CFG_PROCESS_ROLES: broker,controller
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_LOG_DIRS: /bitnami/kafka/data
    networks:
      - microservices-net
    volumes:
      - kafka-data:/bitnami/kafka

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.0
    container_name: schema-registry
    depends_on:
      - kafka
    ports:
      - "8085:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: PLAINTEXT://kafka:9092
    networks:
      - microservices-net

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8088:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_SCHEMAREGISTRY=http://schema-registry:8081
    networks:
      - microservices-net

networks:
  microservices-net:
    driver: bridge

volumes:
  postgres-data:
  mongo-data:
  kafka-data:
